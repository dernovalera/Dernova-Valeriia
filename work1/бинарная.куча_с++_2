#include <Windows.h>  // подключаем библиотеку для русского языка
#include <iostream>  // для ввода и вывода данных
#include <vector>  // подключаем библиотеку для использования динамического массива
using namespace std;  // чтобы не писать std:: перед cin (вводит пользователь) и cout (выводит компьютер)

vector<int> heap; // сама куча
void siftUp(int i) { // "просеивание вверх", берет индекс элемента i и поднимает его вверх (пока элемент меньше родителя)
    while (i > 0 && heap[i] < heap[(i-1)/2]) {  // цикл выполняется, пока элемент не в корне (i > 0) и он меньше своего родителя
        swap(heap[i], heap[(i-1)/2]);  // меняем местами текущий элемент и родителя
        i = (i-1)/2;  // текущий элемент оказался на месте родителя, поэтому обновляем i
    }
}
void siftDown(int i) {  // "просеивание вниз", опускает элемент с индекса i вниз, пока он больше кого-то из дочерних
    int n = heap.size();  // сохраняем текущий размер массива в n, чтобы не вызывать size()
    while (2*i+1 < n) {  // пока у текущего узла есть левый ребенок - пытаемся опустить (если нет - ничего делать не нужно)
        int j = 2*i+1;  // считаем индекс левого потомка и временно считаем, что минимум из потомков — левый
        if (j+1 < n && heap[j+1] < heap[j]) j++;  // если существует правый потомок и он меньше левого, то выбираем прового
        if (heap[i] <= heap[j]) break;  // если текущий элемент уже меньше или равен минимальному из детей - выходим
        swap(heap[i], heap[j]);  // иначе меняем текущий элемент с потомком (опускам на шаг вниз)
        i = j;  // обновляем индекс текущего узла
    }
}
void insert(int x) {  // функция, добавляющая новое значение x в кучу
    heap.push_back(x);  // х добавляется в конец
    siftUp(heap.size()-1);  // вызываем siftUp для индекса только что добавленного элемента (heap.size()-1 — последний индекс), это поднимет элемент на нужную позицию
}
int extractMin() {  // функция возвращает минимум (корень) и удаляет его из кучи
    int res = heap[0];  // сохраняем корневое значение (минимум), которое будем возвращать
    heap[0] = heap.back();  // берем последний элемент в массиве и ставим его в корень
    heap.pop_back();  // удаляем последний элемент (который только что вставили в корень)
    if (!heap.empty()) siftDown(0); // опускаем этот новый корень до правильного места
    return res;  // res - это оригинальный корень, который мы хотели достать, все остальное для того, чтобы куча осталась корректной после удаления
}
int main() {
    SetConsoleCP(65001);  // чтобы вводить на русском языке
    SetConsoleOutputCP(65001);  // чтобы выводить на русском языке
    insert(5);  // добавление числа в кучу
    insert(19);  // добавление числа в кучу
    insert(8);  // добавление числа в кучу
    insert(13);  // добавление числа в кучу
    cout << extractMin() << "\n";  // выводится первый минимум (корень)
    cout << extractMin() << "\n";  // выводим второй минимум (корень)
}
